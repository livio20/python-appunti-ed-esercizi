{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "verifica-b3.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MDJfq0dyG8Ws"
      },
      "source": [
        "1\\. Scrivere un programma che permetta di convertire un peso da kg in libbre. L’utente inserisce il peso in kg e il programma calcola il peso corrispondente nell’altra unità di misura.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mxbYMe-3G8mr"
      },
      "source": [
        "m = float(input('Inserisci una massa in Kg: '))\n",
        "\n",
        "print('{}kg = {} libbre'.format(m, m * 2.20462))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VmRd4kHvJs8m"
      },
      "source": [
        "2\\. Scrivere un programma che permetta di verificare se un indirizzo mail contiene il carattere @. L’utente inserisce l’indirizzo e il programma restituisce il messaggio “indirizzo corretto” se il carattere è presente” o “indirizzo errato” se il carattere non è presente. Il carattere @ non può essere presente in prima o ultima posizione.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4em0ROHFJtOd"
      },
      "source": [
        "mail = input('Inserisci un indirizzo email: ')\n",
        "\n",
        "if list(mail)[0] != '@' and list(mail)[-1] != '@' and mail.count('@') != 0:\n",
        "  print('Indirizzo corretto')\n",
        "else:\n",
        "  print('Indirizzo errato')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6Sft2o4DK0DX"
      },
      "source": [
        "3\\. Scrivere un programma che visualizzi l’inverso dei primi n numeri interi con n inserito dall’utente. Per esempio, se l’utente inserisse il valore 4 il programma dovrebbe visualizzare i valori 1 (1:1), 0,5 (1:2), 0,33333 (1:3) e 0.25 (1:4). Separare i valori visualizzati con una virgola.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "v_UtLY4wKz74"
      },
      "source": [
        "n = int(input('Inserisci un numero: '))\n",
        "\n",
        "res = ''\n",
        "for num in range(1, n+1):\n",
        "  res+= '{} ({}:{}), '.format(round(1/num, 2), 1, num)\n",
        "\n",
        "print(res)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jQ4J4ZRCMG5Z"
      },
      "source": [
        "4\\. Scrivere un programma che carichi in una lista i primi 100 numeri interi dispari. Al termine visualizzare gli ultimi 10 numeri della lista.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SOgL6a3cMHKB"
      },
      "source": [
        "l = [n for n in range(0, 101) if n%2 == 1]\n",
        "\n",
        "print(l[-10:])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WaH5TQxSMfer"
      },
      "source": [
        "5\\. Scrivere un programma che elimini dalla lista precedente gli ultimi 10 elementi. Visualizzare al termine la lista modificata.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ai37bbT_Mfwe"
      },
      "source": [
        "l = l[:-10]\n",
        "\n",
        "print(l)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "H8zHssLlwKc8"
      },
      "source": [
        "6\\. Scrivere una funzione che data una lista formata da un numero pari di elementi restituisca la lista con gli elementi scambiati a due a due. Ad esempio se la lista di partenza fosse [1, 2, 3, 4, 5, 6] la lista da restituire sarebbe [2, 1, 4, 3, 6, 5]"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eGrzFA-GwB0a"
      },
      "source": [
        "l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n",
        "\n",
        "def swap_pos(li):\n",
        "  for n in [num for num in range(len(l)//2+(len(l)//4)+2) if num%2 == 0]:\n",
        "    li[n], li[n+1] = li[n+1], li[n]\n",
        "\n",
        "  return li\n",
        "\n",
        "print(swap_pos(l))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kwgu8BIBwNUk"
      },
      "source": [
        "7\\. Scrivere un programma che permetta di caricare in una struttura dati opportuna i nomi delle regioni italiane, i loro capoluoghi e la popolazione (inserire solo tre regioni). Visualizzare poi i dati di una regione inserita dall’utente\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JZdqmcsywNhR"
      },
      "source": [
        "regioni = {'Abruzzo': {'capoluogo': 'Aquila', 'abitanti': 69605}, 'Basilicata': {'capoluogo': 'Potenza', 'abitanti': 562869}, 'Calabria': {'capoluogo': 'Catanzaro', 'abitanti': 1947000}}\n",
        "\n",
        "req = input('Insceri il nome di una regione: ')\n",
        "\n",
        "print('Capoluogo: {}\\nPopolazione: {} abitanti'.format(regioni[req]['capoluogo'], regioni[req]['abitanti']))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8SKuyOQ5Pf9N"
      },
      "source": [
        "8\\. Scrivere un programma che, utilizzando una lambda function e la funzione filter, elimini da una lista inserita dall’utente tutti gli elementi dispari. Al termine, visualizzare la lista modificata\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YomIrs9WPgSd"
      },
      "source": [
        "l = input('Inserisci una lista: ').split(',')\n",
        "\n",
        "res = list(filter(lambda x: (int(x)%2 == 0), l))\n",
        "\n",
        "print(res)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "i344_E8MRObu"
      },
      "source": [
        "9\\. Scrivere una funzione che, in modo ricorsivo, calcoli la somma dei primi n numeri interi, con n inserito dall’utente. Ad esempio se l’utente inserisse 5 il programma dovrebbe restituire il valore 15 (5+4+3+2+1=15)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lCDkiNSMRN7y"
      },
      "source": [
        "n = int(input('Inserisci un numero: '))\n",
        "\n",
        "res = 0\n",
        "for num in range(n+1):\n",
        "  res+=num\n",
        "\n",
        "print(res)"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}
